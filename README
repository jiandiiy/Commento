발표자료: 계산기 웹 애플리케이션 코드 설명

1. 프로젝트 개요

	•	목표: 간단한 웹 기반 계산기를 구현하여 사용자가 사칙연산(+, -, *, ÷)을 할 수 있도록 하는 프로젝트
	•	구성요소: HTML, CSS로 디자인된 사용자 인터페이스(UI)와 기본적인 계산 기능을 지원하는 레이아웃으로 구성

2. HTML 구조 설명

	•	container: 전체 화면을 중앙에 배치하기 위해 container 클래스를 사용, 화면 크기에 맞춰 계산기를 정렬
	•	display: 계산 결과를 출력하는 영역, 숫자 및 연산 결과가 표시되며, 스타일을 통해 디지털 느낌을 주기 위해 폰트(LAB디지털)를 적용
	•	button_container: 계산기의 숫자와 연산 버튼을 나열하는 레이아웃, 사칙연산자와 숫자, 리셋 버튼으로 구성

3. CSS 스타일링 설명

	•	디지털 폰트 사용: @font-face를 사용해 외부 폰트(LAB디지털)를 적용하여 디지털 화면의 느낌을 살림
	•	반응형 레이아웃: flexbox를 사용해 버튼과 화면을 균등하게 배치하고, 각 버튼의 크기를 일정하게 유지
	•	호버 효과: 버튼에 마우스를 올리면 색상이 변경되도록 설정해 사용자 인터랙션을 강화

4. 사용자 경험 개선 요소

	•	숫자 및 연산자 버튼: 버튼 간 간격을 유지하고 클릭 시 반응하는 시각적 피드백을 제공
	•	디스플레이와 버튼: 디스플레이는 검정색 배경에 주황색 텍스트로 시각적 대비를 주어 가독성을 높임



 주요 기능 및 동작

1. 숫자 입력:
   - 각 숫자 버튼(`0`부터 `9`까지)에는 클릭 이벤트가 연결되어 있습니다. 사용자가 숫자 버튼을 클릭하면 해당 숫자가 현재 선택된 숫자 문자열(`firstNumber` 또는 `secondNumber`)에 추가됩니다. 이 숫자는 디스플레이에 표시됩니다.

2. 연산자 선택:
   - 연산자 버튼(`+`, `-`, `÷`, `x`)을 클릭하면 현재 입력한 숫자를 `firstNumber`로 저장하고, 선택한 연산자는 `operator`에 저장됩니다. 이후 입력된 숫자는 `secondNumber`로 저장됩니다.

3. 계산 수행:
   - `=` 버튼을 클릭하면 `firstNumber`, `secondNumber`, `operator`를 사용하여 계산을 수행하고 결과를 디스플레이에 출력합니다.

4. 초기화:
   - `C` 버튼을 클릭하면 모든 입력(첫 번째 숫자, 두 번째 숫자, 연산자, 결과)이 초기화됩니다.
   - `CE` 버튼을 클릭하면 현재 입력 중인 숫자(연산자가 선택되었다면 2번째 숫자)를 초기화합니다.

 이벤트 설명

- 숫자 버튼 클릭 이벤트:
  - 이벤트 리스너를 통해 `button_number` 클래스를 가진 모든 버튼이 클릭될 때 `firstNumber` 또는 `secondNumber`를 업데이트합니다.

- 연산자 버튼 클릭 이벤트:
  - `button_operator` 클래스를 가진 버튼을 클릭하면 `operator` 변수가 설정됩니다.

- 결과 계산 이벤트:
  - `button_equal` 클래스를 가진 `=` 버튼을 클릭하면 계산이 수행되며 결과를 업데이트합니다.

- 초기화 이벤트:
  - `#button_c` 및 `#button_ce` ID를 가진 버튼에 대한 초기화 기능이 구현되어 있습니다. 각각 모든 값의 초기화와 현재 입력 중인 숫자 초기화를 처리합니다.

 구현 내용 요약

JavaScript 코드 설명

- Variables:
  - `firstNumber`, `secondNumber` : 두 숫자를 저장하는 문자열 변수.
  - `operator`: 현재 선택된 연산자를 저장하는 문자열 변수.
  - `result`: 계산 후 결과값을 저장하는 변수.
  - `display`: 계산기가 보여주는 화면 출력.

- Functions:
  - `updateDisplay(value)`: `display` 화면의 내용을 갱신하는 함수.

 비구현/추가 개선 사항

- 소수점 처리: 현재 입력된 숫자에 대한 소수점 입력과 계산이 충분히 고려되지 않았을 수 있습니다.
- 에러 핸들링: 연산 중 0으로 나눔과 같은 예외 상황에서 적절한 사용자 알림이 필요할 수 있습니다.
- 연산 확장성: 추가적인 연산 기능 및 사용자의 지속적인 입력에 대한 처리를 고려할 수 있습니다.
